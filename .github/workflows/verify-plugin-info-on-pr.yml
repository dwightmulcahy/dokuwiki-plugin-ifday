name: Verify and Auto-Fix plugin.info.txt

on:
  pull_request:
    paths:
      - 'plugin.info.txt'

permissions:
  contents: write
  pull-requests: write

jobs:
  verify-plugin-info:
    runs-on: ubuntu-latest
    env:
      FILE: plugin.info.txt
      PLUGIN_NAME: ifday # or dynamically detect if you want
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure file exists
        run: |
          if [[ ! -f "$FILE" ]]; then
            echo "::error title=Missing file::$FILE not found in the PR."
            exit 1
          fi

      - name: Auto-fix spaces to tabs
        run: |
          sed -i 's/^\([a-z]\+\) \+/\1\t/' "$FILE"

      - name: Commit auto-fix if changed
        run: |
          if ! git diff --quiet -- "$FILE"; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add "$FILE"
            git commit -m "fix(plugin.info.txt): replace spaces with tabs"
            git push
          fi

      - name: Check UTF-8 without BOM
        run: |
          if head -c 3 "$FILE" | od -An -t x1 | tr -d ' \n' | grep -qi '^efbbbf'; then
            echo "::error title=BOM detected::$FILE must be UTF-8 without BOM."
            exit 1
          fi

      - name: Check line endings
        run: |
          if grep -q $'\r' "$FILE"; then
            echo "::error title=CRLF detected::$FILE contains Windows line endings. Use LF."
            exit 1
          fi

      - name: Validate plugin.info.txt format
        run: |
          REQUIRED_KEYS=(base author email date name desc url)
          ALLOWED_KEYS=(base author email date name desc url)
          BAD=0

          awk -F'\t' '
            /^[a-z]+[ \t]/ {
              key=$1
              sub(/[ \t]+$/, "", key)
              val=$2
              gsub(/\r$/, "", val)
              print key"="val
            }
          ' "$FILE" > _fields.env

          # Check required keys
          declare -A counts=()
          while IFS='=' read -r k v; do
            [[ -z "$k" ]] && continue
            counts["$k"]=$(( ${counts["$k"]:-0} + 1 ))
          done < _fields.env

          for k in "${REQUIRED_KEYS[@]}"; do
            if ! grep -q "^${k}=" _fields.env; then
              echo "::error title=Missing key::Key '${k}' is required."
              BAD=1
            fi
            if [[ "${counts[$k]:-0}" -ne 1 ]]; then
              echo "::error title=Duplicate key::Key '${k}' appears ${counts[$k]:-0} times."
              BAD=1
            fi
          done

          # Disallow unknown keys
          while IFS='=' read -r k v; do
            ok=0
            for a in "${ALLOWED_KEYS[@]}"; do [[ "$k" == "$a" ]] && ok=1; done
            if [[ $ok -ne 1 ]]; then
              echo "::error title=Unknown key::Key '${k}' is not allowed."
              BAD=1
            fi
          done < _fields.env

          # Validate date format
          source _fields.env
          if [[ ! "$date" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] || ! date -d "$date" "+%Y-%m-%d" >/dev/null 2>&1; then
            echo "::error title=Invalid date::date='$date' must be valid YYYY-MM-DD."
            BAD=1
          fi

          [[ $BAD -eq 1 ]] && exit 1
