name: Verify plugin.info.txt

on:
  pull_request:
    paths:
      - 'plugin.info.txt'

permissions:
  contents: write
  pull-requests: write

jobs:
  verify-plugin-info:
    runs-on: ubuntu-latest
    env:
      FILE: plugin.info.txt
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Derive PLUGIN_NAME from repo
        id: derive_name
        shell: bash
        run: |
          set -euo pipefail
          repo="${GITHUB_REPOSITORY##*/}"              # e.g. dokuwiki-plugin-ifday
          name="${repo#dokuwiki-plugin-}"              # -> ifday
          echo "PLUGIN_NAME=$name" >> "$GITHUB_ENV"
          echo "Derived PLUGIN_NAME=$name"

      - name: Ensure file exists
        shell: bash
        run: |
          set -euo pipefail
          [[ -f "$FILE" ]] || { echo "::error title=Missing file::$FILE not found in the PR."; exit 1; }

      - name: Quick encoding/line-ending sanity
        shell: bash
        run: |
          set -euo pipefail
          # No UTF-8 BOM
          if head -c 3 "$FILE" | od -An -t x1 | tr -d ' \n' | grep -qi '^efbbbf'; then
            echo "::error title=BOM detected::$FILE must be UTF-8 without BOM."
            exit 1
          fi
          # No CRLF
          if grep -q $'\r' "$FILE"; then
            echo "::error title=CRLF detected::$FILE contains Windows line endings. Use LF."
            exit 1
          fi

      - name: Auto-fix key spacing (collapse spaces/tabs to single TAB)
        shell: bash
        run: |
          set -euo pipefail
          # Replace any run of spaces/tabs after a lowercase key with exactly one TAB
          # Example: "date   2025-08-14" -> "date<TAB>2025-08-14"
          sed -E -i 's/^([a-z]+)[[:space:]]+/\1\t/' "$FILE"


      - name: Commit auto-fix if changed (same-repo PRs only)
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository && !cancelled() }}
        shell: bash
        run: |
          set -euo pipefail
          if ! git diff --quiet -- "$FILE"; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add "$FILE"
            git commit -m "fix(plugin.info.txt): normalize whitespace to single tab after keys"
            git push
          fi

      - name: Validate plugin.info.txt
        shell: bash
        run: |
          set -euo pipefail

          is_valid_date() {
            local d="$1"
            [[ "$d" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] || return 1
            # GNU date is available on ubuntu-latest
            LC_ALL=C date -d "$d" "+%Y-%m-%d" >/dev/null 2>&1
          }

          REQUIRED_KEYS=(base author email date name desc url)
          ALLOWED_KEYS=(base author email date name desc url)
          BAD=0

          declare -A counts F

          # Parse lines that start with lowercase key and at least one space/tab, keeping the full value (including extra tabs)
          while IFS= read -r line; do
            [[ "$line" =~ ^[a-z]+[[:space:]] ]] || continue
            # Expect exactly one tab after normalization
            if [[ "$line" == *$'\t'* ]]; then
              key="${line%%$'\t'*}"
              val="${line#*$'\t'}"
              # Trim trailing CR if any
              val="${val%$'\r'}"
              counts["$key"]=$(( ${counts["$key"]:-0} + 1 ))
              F["$key"]="$val"
            fi
          done < "$FILE"

          for k in "${REQUIRED_KEYS[@]}"; do
            if [[ -z "${counts[$k]:-}" ]]; then
              echo "::error title=Missing key::Key '${k}' is required."
              BAD=1
            elif [[ "${counts[$k]}" -ne 1 ]]; then
              echo "::error title=Duplicate key::Key '${k}' appears ${counts[$k]} times."
              BAD=1
            fi
          done

          for k in "${!counts[@]}"; do
            ok=0
            for a in "${ALLOWED_KEYS[@]}"; do [[ "$k" == "$a" ]] && ok=1; done
            if [[ $ok -ne 1 ]]; then
              echo "::error title=Unknown key::Key '${k}' is not allowed. Allowed keys: ${ALLOWED_KEYS[*]}"
              BAD=1
            fi
          done

          email="${F[email]:-}"
          datev="${F[date]:-}"
          url="${F[url]:-}"
          basev="${F[base]:-}"
          namev="${F[name]:-}"
          descv="${F[desc]:-}"

          if [[ -n "${PLUGIN_NAME:-}" && "$basev" != "$PLUGIN_NAME" ]]; then
            echo "::error title=base mismatch::base='$basev' does not match folder '$PLUGIN_NAME'."
            BAD=1
          fi

          if [[ ! "$email" =~ ^[^@[:space:]]+@[^@[:space:]]+\.[^@[:space:]]+$ ]]; then
            echo "::error title=Invalid email::email='$email' looks invalid."
            BAD=1
          fi

          if ! is_valid_date "$datev"; then
            echo "::error title=Invalid date::date='$datev' must be valid YYYY-MM-DD."
            BAD=1
          fi

          if [[ ! "$url" =~ ^https:// ]]; then
            echo "::error title=URL must be HTTPS::url='$url' must start with https://"
            BAD=1
          fi

          if [[ -z "$namev" ]]; then
            echo "::error title=Missing name::name field is empty."
            BAD=1
          fi
          if [[ -z "$descv" ]]; then
            echo "::error title=Missing desc::desc field is empty."
            BAD=1
          fi

          # Enforce literal TAB after each required key
          for k in "${REQUIRED_KEYS[@]}"; do
            grep -q "^${k}"$'\t' "$FILE" || { echo "::error title=Tab required::Key '${k}' must be followed by a TAB."; BAD=1; }
          done

          echo "::notice title=Parsed fields::base='${F[base]:-}', author='${F[author]:-}', email='${F[email]:-}', date='${F[date]:-}', name='${F[name]:-}', url='${F[url]:-}'"

          [[ $BAD -eq 1 ]] && exit 1
