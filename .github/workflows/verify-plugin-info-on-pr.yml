name: Verify plugin.info.txt (PR)

on:
  pull_request:
    paths:
      - 'plugin.info.txt'

permissions:
  contents: write
  pull-requests: write

jobs:
  verify-plugin-info:
    runs-on: ubuntu-latest
    env:
      FILE: plugin.info.txt
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Derive PLUGIN_NAME from repo
        id: derive_name
        shell: bash
        run: |
          set -euo pipefail
          repo="${GITHUB_REPOSITORY##*/}"              # e.g. dokuwiki-plugin-ifday
          name="${repo#dokuwiki-plugin-}"              # -> ifday
          echo "PLUGIN_NAME=$name" >> "$GITHUB_ENV"
          echo "Derived PLUGIN_NAME=$name"

      - name: Ensure file exists
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -f "$FILE" ]]; then
            echo "::error title=Missing file::$FILE not found in the PR."
            exit 1
          fi

      - name: Auto-fix key spacing (spaces â†’ single TAB)
        shell: bash
        run: |
          set -euo pipefail
          # Replace one-or-more spaces after a lowercase key with a single TAB
          sed -i 's/^\([a-z]\+\) \+/	/' "$FILE"

      - name: Commit auto-fix if changed (same-repo PRs only)
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository && !cancelled() }}
        shell: bash
        run: |
          set -euo pipefail
          if ! git diff --quiet -- "$FILE"; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add "$FILE"
            git commit -m "fix(plugin.info.txt): replace spaces with a single tab after keys"
            git push
          fi

      - name: Validate plugin.info.txt
        shell: bash
        run: |
          set -euo pipefail

          is_valid_date() {
            local d="$1"
            [[ "$d" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] || return 1

            LC_ALL=C date -d "$d" "+%Y-%m-%d" >/dev/null 2>&1 && return 0
            LC_ALL=C date -j -f "%Y-%m-%d" "$d" "+%Y-%m-%d" >/dev/null 2>&1 && return 0

            if command -v python3 >/dev/null 2>&1 && python3 - <<PY
import sys, datetime
try:
    datetime.date.fromisoformat("$d")
    sys.exit(0)
except Exception:
    sys.exit(1)
PY
            then
              return 0
            fi

            return 1
          }

          REQUIRED_KEYS=(base author email date name desc url)
          ALLOWED_KEYS=(base author email date name desc url)
          BAD=0

          declare -A counts F
          while IFS=$'' read -r k v; do
            [[ -z "$k" ]] && continue
            counts["$k"]=$(( ${counts["$k"]:-0} + 1 ))
            F["$k"]="$v"
          done < <(awk '
            BEGIN{FS="\t"}
            /^[a-z]+[ \t]/ {
              key=$1
              sub(/[ \t]+$/, "", key)
              val=$2
              sub(/\r$/, "", val)
              printf "%s\037%s\n", key, val
            }
          ' "$FILE")

          for k in "${REQUIRED_KEYS[@]}"; do
            if [[ -z "${counts[$k]:-}" ]]; then
              echo "::error title=Missing key::Key '${k}' is required."
              BAD=1
            elif [[ "${counts[$k]}" -ne 1 ]]; then
              echo "::error title=Duplicate key::Key '${k}' appears ${counts[$k]} times."
              BAD=1
            fi
          done

          for k in "${!counts[@]}"; do
            ok=0
            for a in "${ALLOWED_KEYS[@]}"; do [[ "$k" == "$a" ]] && ok=1; done
            if [[ $ok -ne 1 ]]; then
              echo "::error title=Unknown key::Key '${k}' is not allowed. Allowed keys: ${ALLOWED_KEYS[*]}"
              BAD=1
            fi
          done

          email="${F[email]:-}"
          datev="${F[date]:-}"
          url="${F[url]:-}"
          basev="${F[base]:-}"
          namev="${F[name]:-}"
          descv="${F[desc]:-}"

          if [[ -n "${PLUGIN_NAME:-}" && "$basev" != "$PLUGIN_NAME" ]]; then
            echo "::error title=base mismatch::base='$basev' does not match folder '$PLUGIN_NAME'."
            BAD=1
          fi

          if [[ ! "$email" =~ ^[^@[:space:]]+@[^@[:space:]]+\.[^@[:space:]]+$ ]]; then
            echo "::error title=Invalid email::email='$email' looks invalid."
            BAD=1
          fi

          if ! is_valid_date "$datev"; then
            echo "::error title=Invalid date::date='$datev' must be valid YYYY-MM-DD."
            BAD=1
          fi

          if [[ ! "$url" =~ ^https:// ]]; then
            echo "::error title=URL must be HTTPS::url='$url' must start with https://"
            BAD=1
          fi

          if [[ -z "$namev" ]]; then
            echo "::error title=Missing name::name field is empty."
            BAD=1
          fi
          if [[ -z "$descv" ]]; then
            echo "::error title=Missing desc::desc field is empty."
            BAD=1
          fi

          for k in "${REQUIRED_KEYS[@]}"; do
            if ! grep -q "^${k}"$'	' "$FILE"; then
              echo "::error title=Tab required::Key '${k}' must be followed by a TAB."
              BAD=1
            fi
          done

          echo "::notice title=Parsed fields::base='${F[base]:-}', author='${F[author]:-}', email='${F[email]:-}', date='${F[date]:-}', name='${F[name]:-}', url='${F[url]:-}'"

          [[ $BAD -eq 1 ]] && exit 1
