name: Build DokuWiki Plugin ZIP and Changelog on version tag (i.e., v1.0.0)

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-release:
    runs-on: ubuntu-latest

    env:
      INCLUDE_FILES: |
        plugin.info.txt
        README.md
        LICENSE
        action.php
        admin.php
        helper.php
        helper_*.php
        metadata.php
        metadata_*.php
        install.php
        meta.php
        syntax.php
        conf/
        lang/
        doc/
        tpl/
        styles.css
        script.js
        config/
        tests/

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract plugin name from repo name
        id: extract_plugin_name
        run: |
          repo="${GITHUB_REPOSITORY##*/}"
          prefix="dokuwiki-plugin-"
          if [[ "$repo" == "$prefix"* ]]; then
            plugin_name="${repo#$prefix}"
          else
            plugin_name="$repo"
          fi
          echo "PLUGIN_NAME=$plugin_name" >> "$GITHUB_ENV"
          echo "TAG_NAME=${GITHUB_REF_NAME}" >> "$GITHUB_ENV"         # e.g. v1.2.3
          echo "VERSION=${GITHUB_REF_NAME#v}" >> "$GITHUB_ENV"        # e.g. 1.2.3

      - name: Install git-cliff
        run: |
          set -euo pipefail
          curl -sSL https://github.com/orhun/git-cliff/releases/download/v2.10.0/git-cliff-2.10.0-x86_64-unknown-linux-gnu.tar.gz | tar -xz
          sudo mv git-cliff-2.10.0/git-cliff /usr/local/bin/git-cliff
          git-cliff --version

      - name: Generate CHANGELOG.md from commits
        run: |
          set -euo pipefail
          ls
          git-cliff --config cliff.toml -o CHANGELOG.md

      - name: Build release ZIP with correct top-level folder
        run: |
          set -euo pipefail
          shopt -s nullglob

          STAGE="build/stage"
          OUTDIR="build"
          mkdir -p "$STAGE" "$OUTDIR"

          # Stage under PLUGIN_NAME/ so the zip root is correct
          DEST="$STAGE/${PLUGIN_NAME}"
          rm -rf "$DEST"
          mkdir -p "$DEST"

          # Add included files and directories if present
          while IFS= read -r item; do
            [[ -z "$item" ]] && continue
            found=0
            for path in $item; do
              if [[ -e "$path" ]]; then
                found=1
                echo "Adding $path"
                rsync -a "$path" "$DEST"/
              fi
            done
            if [[ $found -eq 0 ]]; then
              echo "Skipping missing $item"
            fi
          done <<< "${INCLUDE_FILES}"

          # Normalize plugin.info.txt in the staged copy only
          if [[ -f "$DEST/plugin.info.txt" ]]; then
            today=$(TZ=America/Chicago date +'%Y-%m-%d')

            # strip UTF-8 BOM if present, then ensure "date<TAB>YYYY-MM-DD"
            tmp="$DEST/plugin.info.txt.tmp"
            { sed '1s/^\xEF\xBB\xBF//' "$DEST/plugin.info.txt" || cat "$DEST/plugin.info.txt"; } > "$tmp"

            awk -v today="$today" 'BEGIN{FS="[ \t]+"; OFS="\t"}
              /^date([ \t]|$)/ { print "date", today; next }
              { print }
            ' "$tmp" > "$DEST/plugin.info.txt"

            rm -f "$tmp"
            { printf '%s\n' '--- plugin.info.txt ---' && cat -A "$DEST/plugin.info.txt"; }
          else
            echo "Warning: $DEST/plugin.info.txt not found; skipping date normalization"
          fi

          # Create versioned zip using the exact tag (includes the leading v)
          ZIP_FILE="${OUTDIR}/${PLUGIN_NAME}-${TAG_NAME}.zip"
          rm -f "$ZIP_FILE"
          (cd "$STAGE" && zip -r -q "../${PLUGIN_NAME}-${TAG_NAME}.zip" "${PLUGIN_NAME}")

          # Copy changelog alongside
          cp CHANGELOG.md "$OUTDIR"/

          echo "Created $ZIP_FILE"
          echo "ZIP_FILE=$ZIP_FILE" >> "$GITHUB_ENV"

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }}
          body_path: build/CHANGELOG.md
          files: |
            ${{ env.ZIP_FILE }}
            build/CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
